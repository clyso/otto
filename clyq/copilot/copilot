#!/usr/bin/env python3

import os
import yaml
import argparse
import subprocess
import json

from clyso.ceph.ai import generate_result

CONFIG_FILE = 'copilot.yaml'

def jsoncmd(command):
    with open(os.devnull, 'w') as devnull:
        out = subprocess.check_output(command.split(), stderr=devnull)
    return json.loads(out)

def collect():
    return True

def pretty_result(result):
    # Load the JSON data
    json_data = json.loads(result)

    # Print the summary
    print(f"Overall score: {json_data['summary']['score']}/{json_data['summary']['max_score']}")
    print(f"Grade: {json_data['summary']['grade']}\n")

    # Loop over the sections
    for section in json_data['sections']:
        print(f"Section: {section['id']}")
        print(f"Score: {section['score']}/{section['max_score']}")
        print(f"Grade: {section['grade']}")
        print("Checks:")
        for check in section['checks']:
            print(f"  - ID: {check['id']}")
            print(f"    Result: {check['result']}")
            print(f"    Summary: {check['summary']}")
            print(f"    Details: {check['detail']}\n")

def subcommand_checkup(args):
    if args.ceph_report_json:
        with open(args.ceph_report_json, 'r') as file:
            report = json.load(file)
    else:
        report = collect()

    result = generate_result(report_json = report)
    pretty_result(result.dump())


def get_tuning_profiles():
    return {
        'balanced': {
            'description': 'Balanced tuning for general-purpose workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 8,
                },
            },
            'devices': 'hdd|mixed|ssd|nvme',
        },
        'performance': {
            'description': 'Optimized for high-performance workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 16,
                    'osd_memory_target': 2147483648,
                },
            }
        },
        'capacity': {
            'description': 'Optimized for large-scale, capacity-oriented workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 4,
                },
            }
        },
        'lowmem': {
            'description': 'Optimized for low memory nodes, e.g. edge devices.',
            'settings': {
                'osd': {
                    'osd_memory_target': 2147483648,
                },
            }
        }
    }

def profile_list(args):
    profiles = get_tuning_profiles()
    print("Available tuning profiles:")
    for name, profile in profiles.items():
        print(f"- {name}: {profile['description']}")
    profile_show(args)

def profile_set(args):
    profile_name = args.profilename
    profiles = get_tuning_profiles()
    if profile_name not in profiles:
        print(f"Error: Unknown profile '{profile_name}'.")
        profile_list(args)
        return

    with open(CONFIG_FILE, 'w') as f:
        yaml.dump({'active_profile': profile_name}, f)

    print(f"Successfully set active tuning profile to '{profile_name}'.")

def profile_show(args):
    if not os.path.exists(CONFIG_FILE):
        print("Error: No active tuning profile found.")
        return

    with open(CONFIG_FILE, 'r') as f:
        config = yaml.safe_load(f)

    active_profile = config.get('active_profile')
    if not active_profile:
        print("Error: No active tuning profile found.")
        return

    print(f"Active tuning profile: {active_profile}")

def profile_verify(args):
    if not os.path.exists(CONFIG_FILE):
        print("Error: No active tuning profile found.")
        return

    with open(CONFIG_FILE, 'r') as f:
        config = yaml.safe_load(f)

    active_profile = config.get('active_profile')
    if not active_profile:
        print("Error: No active tuning profile found.")
        return

    profiles = get_tuning_profiles()
    profile = profiles.get(active_profile)
    if not profile:
        print(f"Error: Unknown profile '{active_profile}'.")
        return

    settings = profile.get('settings')
    if not settings:
        print(f"Error: No settings found for profile '{active_profile}'.")
        return

    for key, value in settings.items():
        ceph_value = run_ceph_command(['config', 'get', 'global', key])
        if str(value) != ceph_value.strip():
            print(f"Error: Mismatched setting '{key}': expected '{value}', found '{ceph_value.strip()}'.")
            return

    print("Current Ceph configuration matches the active profile.")

def run_ceph_command(args):
    command = ['ceph']
    command.extend(args)
    try:
        output = subprocess.check_output(command)
        print(output.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.output.decode('utf-8')}")
        exit(1)

def copilot_help():
    help_text = """
Ceph Copilot Help:

Ceph Copilot is a wrapper around the Ceph CLI tool that disables dangerous
commands and provides a simplified interface for managing Ceph clusters.

Available Copilot subcommands:

- checkup: Provide an overall health and safety check on the cluster
- profile list: List available Ceph tuning profiles
- profile set: Set a Ceph tuning profile
- profile show: Show the currently used Ceph tuning profile
- profile verify: Check if the cluster configuration matches the profile recommendations
    """
    print(help_text)

def main():
    # Create the top-level parser
    parser = argparse.ArgumentParser(prog='copilot', description='Ceph Copilot: Your Expert Ceph Assistant')
    subparsers = parser.add_subparsers(required=True, title='subcommands',
                                       description='valid subcommands',
                                       help='additional help')

    # create the parser for the "checkup" command
    parser_checkup = subparsers.add_parser('checkup', help='checkup help')
    parser_checkup.add_argument('--ceph_report_json', type=str, help='ceph_report_json help')
    parser_checkup.set_defaults(func=subcommand_checkup)

    # Create the parser for the "profile" command
    parser_profile = subparsers.add_parser('profile', help='profile help')
    profile_subparsers = parser_profile.add_subparsers(required=True, help='profile sub-command help')

    # Create the parser for the "profile list" command
    parser_profile_list = profile_subparsers.add_parser('list', help='list help')
    parser_profile_list.set_defaults(func=profile_list)

    # Create the parser for the "profile set" command
    parser_profile_set = profile_subparsers.add_parser('set', help='set help')
    parser_profile_set.add_argument('profilename', type=str, help='profilename help')
    parser_profile_set.set_defaults(func=profile_set)

    # Create the parser for the "profile show" command
    parser_profile_show = profile_subparsers.add_parser('show', help='show help')
    parser_profile_show.set_defaults(func=profile_show)

    # Create the parser for the "profile verify" command
    parser_profile_verify = profile_subparsers.add_parser('verify', help='verify help')
    parser_profile_verify.set_defaults(func=profile_verify)

    # Parse the arguments and call the appropriate function
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
