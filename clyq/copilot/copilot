#!/usr/bin/env python3

import os
import yaml
import argparse
import subprocess
import json

from clyso.ceph.ai import generate_result

CONFIG_FILE = 'copilot.yaml'
VERSION='0.1.3'

def jsoncmd(command):
    with open(os.devnull, 'w') as devnull:
        out = subprocess.check_output(command.split(), stderr=devnull)
    return json.loads(out)

def collect():
    return jsoncmd('ceph report')


def render_progress_bar(data):
    statuses = []
    for section in data['sections']:
        for check in section['checks']:
            statuses.append(check['result'])
    characters = {
        'PASS': '.',
        'WARN': '!',
        'FAIL': 'X',
    }
    progress_bar = [characters.get(status, '?') for status in statuses]
    return ''.join(progress_bar)


def compact_result(result):
    # Load the JSON data
    json_data = json.loads(result)

    # Print a "progress bar"
    print(f"Running tests: {render_progress_bar(json_data)}\n")

    # Print the summary
    print(f"Overall score: {json_data['summary']['score']:g} out of {json_data['summary']['max_score']} ({json_data['summary']['grade']})\n")

    # Loop over the sections
    warned = False
    for section in json_data['sections']:
        for check in section['checks']:
            if check['result'] != 'PASS':
                print(f"- {check['result']} in {section['id']}/{check['id']}: {check['summary']}")
                warned = True

    if warned:
        print("\nUse --verbose for details and recommendations")

def verbose_result(result):
    # Load the JSON data
    json_data = json.loads(result)

    # Print the summary
    print(f"Overall score: {json_data['summary']['score']:g} out of {json_data['summary']['max_score']} ({json_data['summary']['grade']})\n")

    # Loop over the sections
    for section in json_data['sections']:
        print(f"Section: {section['id']}")
        print(f"Score: {section['score']:g} out of {section['max_score']} ({section['grade']})")
        print("Info:")
        for info in section['info']:
            print(f"  - ID: {info['id']}")
            print(f"    Summary: {info['summary']}")
            print(f"    Details:")
            for detail in info['detail']:
                print(f"      - {detail}")
            if not info['detail']:
                print(f"      - None")
        if not section['info']:
            print("  - None")
        print("Checks:")
        for check in section['checks']:
            print(f"  - ID: {check['id']}")
            print(f"    Result: {check['result']}")
            print(f"    Summary: {check['summary']}")
            print(f"    Details:")
            for detail in check['detail']:
                print(f"      - {detail}")
            if not check['detail']:
                print(f"      - None")
            print(f"    Recommendations:")
            for recommend in check['recommend']:
                print(f"      - {recommend}")
            if not check['recommend']:
                print(f"      - None")
            print("")
        if not section['checks']:
            print("  - None")
            print("")


def subcommand_checkup(args):
    if args.ceph_report_json:
        with open(args.ceph_report_json, 'r') as file:
            report = json.load(file)
    else:
        report = collect()

    result = generate_result(report_json = report)
    if args.verbose:
        verbose_result(result.dump())
    else:
        compact_result(result.dump())


def get_tuning_profiles():
    return {
        'balanced': {
            'description': 'Balanced tuning for general-purpose workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 8,
                },
            },
            'devices': 'hdd|mixed|ssd|nvme',
        },
        'performance': {
            'description': 'Optimized for high-performance workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 16,
                    'osd_memory_target': 2147483648,
                },
            }
        },
        'capacity': {
            'description': 'Optimized for large-scale, capacity-oriented workloads.',
            'settings': {
                'osd': {
                    'osd_op_threads': 4,
                },
            }
        },
        'lowmem': {
            'description': 'Optimized for low memory nodes, e.g. edge devices.',
            'settings': {
                'osd': {
                    'osd_memory_target': 2147483648,
                },
            }
        }
    }

def profile_list(args):
    profiles = get_tuning_profiles()
    print("Available tuning profiles:")
    for name, profile in profiles.items():
        print(f"- {name}: {profile['description']}")
    profile_show(args)

def profile_set(args):
    profile_name = args.profilename
    profiles = get_tuning_profiles()
    if profile_name not in profiles:
        print(f"Error: Unknown profile '{profile_name}'.")
        profile_list(args)
        return

    with open(CONFIG_FILE, 'w') as f:
        yaml.dump({'active_profile': profile_name}, f)

    print(f"Successfully set active tuning profile to '{profile_name}'.")

def profile_show(args):
    if not os.path.exists(CONFIG_FILE):
        print("Error: No active tuning profile found.")
        return

    with open(CONFIG_FILE, 'r') as f:
        config = yaml.safe_load(f)

    active_profile = config.get('active_profile')
    if not active_profile:
        print("Error: No active tuning profile found.")
        return

    print(f"Active tuning profile: {active_profile}")

def profile_verify(args):
    if not os.path.exists(CONFIG_FILE):
        print("Error: No active tuning profile found.")
        return

    with open(CONFIG_FILE, 'r') as f:
        config = yaml.safe_load(f)

    active_profile = config.get('active_profile')
    if not active_profile:
        print("Error: No active tuning profile found.")
        return

    profiles = get_tuning_profiles()
    profile = profiles.get(active_profile)
    if not profile:
        print(f"Error: Unknown profile '{active_profile}'.")
        return

    settings = profile.get('settings')
    if not settings:
        print(f"Error: No settings found for profile '{active_profile}'.")
        return

    for key, value in settings.items():
        ceph_value = run_ceph_command(['config', 'get', 'global', key])
        if str(value) != ceph_value.strip():
            print(f"Error: Mismatched setting '{key}': expected '{value}', found '{ceph_value.strip()}'.")
            return

    print("Current Ceph configuration matches the active profile.")


def toolkit_upmapremapped(args):
    print('upmap-remapped is coming soon. For now, github.com/clyso/ceph-scripts/tools/upmap/ for more info')
    return

def planner_upgrade(args):
    print('Upgrade planner is coming soon.')
    return

def planner_capacity(args):
    print('Capacity planner is coming soon.')
    return

def planner_replacement(args):
    print('Hardware replacement planner is coming soon.')
    return

def run_ceph_command(args):
    command = ['ceph']
    command.extend(args)
    try:
        output = subprocess.check_output(command)
        print(output.decode('utf-8'))
    except subprocess.CalledProcessError as e:
        print(f"Error: {e.output.decode('utf-8')}")
        exit(1)

def main():
    # Create the top-level parser
    parser = argparse.ArgumentParser(prog='copilot', description='Ceph Copilot: Your Expert Ceph Assistant.')
    subparsers = parser.add_subparsers(title='subcommands',
                                       description='valid subcommands',
                                       help='additional help')
    parser.add_argument('--version', action='version', version=f'Clyso Ceph Copilot v{VERSION}')
    subparsers.required = True;

    # create the parser for the "checkup" command
    parser_checkup = subparsers.add_parser('checkup', help='Perform an overall health and safety check on the cluster')
    parser_checkup.add_argument('--ceph_report_json', type=str, help='analyze this `ceph.report` file')
    parser_checkup.add_argument('--verbose', action='store_true', help='Verbose output')
    parser_checkup.set_defaults(func=subcommand_checkup)

    # Create the parser for the "planner" command
    parser_planner = subparsers.add_parser('planner', help='Ceph Planning Tools')
    planner_subparsers = parser_planner.add_subparsers()
    planner_subparsers.required = True;

    # Create the parser for the "planner upgrade" command
    parser_planner_upgrade = planner_subparsers.add_parser('upgrade', help='Plan a ceph upgrade')
    parser_planner_upgrade.set_defaults(func=planner_upgrade)

    # Create the parser for the "planner capacity" command
    parser_planner_capacity = planner_subparsers.add_parser('capacity', help='Ceph capacity planning')
    parser_planner_capacity.set_defaults(func=planner_capacity)

    # Create the parser for the "planner replacement" command
    parser_planner_replacement = planner_subparsers.add_parser('replacement', help='Hardware replacement planning')
    parser_planner_replacement.set_defaults(func=planner_replacement)

    # Create the parser for the "profile" command
    parser_profile = subparsers.add_parser('profile', help='View and apply Ceph Tuning Profiles')
    profile_subparsers = parser_profile.add_subparsers()
    profile_subparsers.required = True;

    # Create the parser for the "profile list" command
    parser_profile_list = profile_subparsers.add_parser('list', help='List available Ceph tuning profiles')
    parser_profile_list.set_defaults(func=profile_list)

    # Create the parser for the "profile set" command
    parser_profile_set = profile_subparsers.add_parser('set', help='Set a Ceph tuning profile')
    parser_profile_set.add_argument('profilename', type=str, help='profilename help')
    parser_profile_set.set_defaults(func=profile_set)

    # Create the parser for the "profile show" command
    parser_profile_show = profile_subparsers.add_parser('show', help='Show the currently used Ceph tuning profile')
    parser_profile_show.set_defaults(func=profile_show)

    # Create the parser for the "profile verify" command
    parser_profile_verify = profile_subparsers.add_parser('verify', help='Check if the cluster configuration matches the profile recommendations')
    parser_profile_verify.set_defaults(func=profile_verify)

    # Create the parser for the "toolkit" command
    parser_toolkit = subparsers.add_parser('toolkit', help='A selection of useful Ceph Tools')
    toolkit_subparsers = parser_toolkit.add_subparsers()
    toolkit_subparsers.required = True;

    # Create the parser for the "toolkit upmap-remapped" command
    parser_toolkit_upmapremapped = toolkit_subparsers.add_parser('upmap-remapped', help='[Advanced] Used to map PGs to their current location, pausing most backfills')
    parser_toolkit_upmapremapped.set_defaults(func=toolkit_upmapremapped)

    # Parse the arguments and call the appropriate function
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
