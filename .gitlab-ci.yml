variables:
  GIT_DEPTH: 50

stages:
  - tests
  - build
  - update-image-tag

run_tests:
  stage: tests
  image: ghcr.io/astral-sh/uv:python3.11-alpine
  script:
    - apk add nmap-ncat
    - apk add bash
    - apk add git
    - git config --global --add safe.directory .
    - uv --no-cache venv
    - uv --no-cache pip install ./copilot_rest_api
    - uv --no-cache pip install ./copilot_netcat
    - source .venv/bin/activate
    - ./run_tests.sh
    - git describe --tags --long --always | awk -F'-' '{ printf "%s+g%s.d%s\n", $1, $3, strftime("%Y%m%d") }' > GIT_VERSION
  artifacts:
    paths: [GIT_VERSION]

run_config_diff_tests:
  stage: tests
  image: ghcr.io/astral-sh/uv:python3.11-alpine
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        - "copilot_config_diff/**/*"
        - "tests/expected-config-diff.json"

  script:
    - apk add nmap-ncat
    - apk add bash
    - apk add git
    - git config --global --add safe.directory .
    - uv --no-cache venv
    - uv --no-cache pip install ./copilot_config_diff
    - uv --no-cache pip install requests
    - source .venv/bin/activate
    - chmod +x copilot_config_diff/run_config_diff_tests.sh
    - ./copilot_config_diff/run_config_diff_tests.sh
    - git describe --tags --long --always | awk -F'-' '{ printf "%s+g%s.d%s\n", $1, $3, strftime("%Y%m%d") }' > GIT_VERSION
  artifacts:
    paths: [GIT_VERSION]

build_rpm:
  stage: tests
  image: rockylinux:9
  needs: [run_tests]
  script:
    - dnf install -y epel-release
    - dnf config-manager --enable crb
    - dnf install -y git rpm-build rpmdevtools python3-devel
    - "curl -LsSf https://astral.sh/uv/install.sh | UV_INSTALL_DIR=/usr/bin
      UV_DISABLE_UPDATE=1 UV_NO_MODIFY_PATH=1 /bin/sh"
    - ./build_rpm.sh
    - dnf install -y ./ceph-copilot-*.x86_64.rpm
    - ceph-copilot --help
    - ceph-copilot --version
    - ceph-copilot toolkit list

include:
  - "/copilot_netcat/.ci_job_build_netcat.yaml"
  - "/copilot_rest_api/.ci_job_build_restapi.yaml"
  - "/copilot_backend/.ci_job_build_backendapi.yaml"
  - "/copilot_config_diff/.ci_job_build_config_diff_api.yaml"

update-image-tag:
  # this will update the image tag on k8s-core-deployment
  # repo.it will deployed to cluster with flux.
  stage: update-image-tag
  image: python:slim-bullseye
  variables:
    DEPLOY_REPO: "gitlab.clyso.com/clyso/k8s-core-deployment.git"
    TXT_RED: '\e[1;31m' # Bold Red
    TXT_CLEAR: '\e[0m' # Clear
    TXT_GREEN: '\e[1;32m' # Bold Green
    TXT_YELLOW: '\e[1;33m' # Bold Yellow
    FILE_DIR: "apps/core/nue-cks-01"
    FILE_NAME: "analyzer.yaml"
  only:
    refs:
      - main
  before_script:
    # install necessary packages
    - apt-get update && apt-get install -y --no-install-recommends curl git jq && rm -rf /var/lib/apt/lists/*

    # Clone the repository via HTTPS
    - |
      # setting git information
      git config --global user.name "${GITLAB_USER_NAME}"
      git config --global user.email "${GITLAB_USER_EMAIL}"

      echo -e "${TXT_YELLOW}[GIT] Working on branch $CI_COMMIT_REF_NAME${TXT_CLEAR}"
    - git clone ${CI_SERVER_PROTOCOL}://${CORE_REPO_USER}:${CORE_REPO_UPDATE_TOKEN}@${DEPLOY_REPO}
    - cd k8s-core-deployment

  script:
    - cd ${FILE_DIR}
    # create script that will replace the image tag for netcat
    - |
      cat <<EOF > update_tag_netcat.py
      import yaml
      # Load the Helm values file
      with open('${FILE_NAME}', 'r') as file:
          values = yaml.safe_load(file)
      # Update the image tag
      values['spec']['values']['netcat']['image']['tag'] = '${CI_COMMIT_SHORT_SHA}'
      # Save the updated values back to the file
      with open('${FILE_NAME}', 'w') as file:
          yaml.dump(values, file)
      EOF
    # create script that will replace the image tag for restapi
    - |
      cat <<EOF > update_tag_restapi.py
      import yaml
      # Load the Helm values file
      with open('${FILE_NAME}', 'r') as file:
          values = yaml.safe_load(file)
      # Update the image tag
      values['spec']['values']['restapi']['image']['tag'] = '${CI_COMMIT_SHORT_SHA}'
      # Save the updated values back to the file
      with open('${FILE_NAME}', 'w') as file:
          yaml.dump(values, file)
      EOF
    # create script that will replace the image tag for config diff api
    - |
      cat <<EOF > update_tag_config_diff_api.py
      import yaml
      # Load the Helm values file
      with open('${FILE_NAME}', 'r') as file:
          values = yaml.safe_load(file)
      # Update the image tag
      values['spec']['values']['config_diff_api']['image']['tag'] = '${CI_COMMIT_SHORT_SHA}'
      # Save the updated values back to the file
      with open('${FILE_NAME}', 'w') as file:
          yaml.dump(values, file)
      EOF
    # install necessary packages
    - pip install PyYAML
    # run script and remove
    - python update_tag_netcat.py
    - python update_tag_restapi.py
    - python update_tag_config_diff_api.py
    - rm -rf update_tag_netcat.py update_tag_restapi.py update_tag_config_diff_api.py
    - cd ../../../
    # check and add the changes in git
    - git status
    - git add .
    - CHECK_UPDATED=$(git status --porcelain | wc -l)
    - |
      if [ "${CHECK_UPDATED}" -gt 0 ]; then

        echo "Image tag for copilot is updated and will be commited to repo";

        # in the case no upstream project called this pipeline
        # set upstream project and commit id to the values of this project
        if [ -z "${UPSTREAM_PROJECT}" ]; then
          UPSTREAM_NAMESPACE=${CI_PROJECT_NAMESPACE}
          UPSTREAM_PROJECT=${CI_PROJECT_NAME}
          UPSTREAM_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA}
        fi

        COMMIT_MSG="trigger!nue-cks-01:[copilot]\"${UPSTREAM_PROJECT}\" updated image tag, commit ${UPSTREAM_NAMESPACE}/${UPSTREAM_PROJECT}@${UPSTREAM_COMMIT_SHORT_SHA}"

        echo -e "${TXT_YELLOW}[GIT]Commiting/Pushing changes using the option ci.skip to prevent a CI-trigger loop.${TXT_CLEAR}"
        echo -e "${TXT_YELLOW}[GIT]Commit message: ${COMMIT_MSG}${TXT_CLEAR}"

        git commit -m "${COMMIT_MSG}"

        # Show the status of files that are about to be created, updated or deleted
        git status

        #  Update the repository and make sure to skip the pipeline create for this commit
        git push -u origin main
      else
        echo -e "${TXT_YELLOW}[GIT]There are no modifications to be commited, exiting."
      fi

# copied over dockerfile contents
build_binary:
  stage: tests
  image: centos:8
  needs: [run_tests]
  script:
    - cd /etc/yum.repos.d/
    - sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
    - sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

    - cd $CI_PROJECT_DIR

    - yum install -y curl git

    - curl -LsSf https://astral.sh/uv/install.sh |
      UV_INSTALL_DIR=/usr/bin
      UV_DISABLE_UPDATE=1
      UV_NO_MODIFY_PATH=1
      /bin/sh

    - ./build.sh
    - ./dist/ceph-copilot --version
    - ./dist/ceph-copilot --help
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

test_binary:
  stage: tests
  image: rockylinux:9
  needs: [build_binary]
  script:
    - chmod +x tests/test_binary.sh
    - ./tests/test_binary.sh
